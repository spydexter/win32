#include <stdio.h>
#include <limits.h>

#define INF 999
#define MAX 10

void dij(int n, int v, int cost[MAX][MAX], int dist[]) {
    int i, u, count, w, flag[MAX];
    int min;

    for (i = 1; i <= n; i++) {
        flag[i] = 0;
        dist[i] = cost[v][i];
    }

    flag[v] = 1;  // Mark the source node as processed
    count = 2;

    while (count <= n) {
        min = INT_MAX;
        for (w = 1; w <= n; w++) {
            if (dist[w] < min && !flag[w]) {
                min = dist[w];
                u = w;
            }
        }

        flag[u] = 1;
        count++;

        for (w = 1; w <= n; w++) {
            if ((dist[u] + cost[u][w] < dist[w]) && !flag[w]) {
                dist[w] = dist[u] + cost[u][w];
            }
        }
    }
}

int main() {
    int n, v, i, j;
    int cost[MAX][MAX], dist[MAX];

    printf("\nEnter the number of nodes: ");
    scanf("%d", &n);

    printf("\nEnter the cost matrix:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0 && i != j) {
                cost[i][j] = INF; // Set to INF if there's no path
            }
        }
    }

    printf("\nEnter the source node: ");
    scanf("%d", &v);

    dij(n, v, cost, dist);

    printf("\nShortest path:\n");
    for (i = 1; i <= n; i++) {
        if (i != v) {
            printf("%d -> %d, cost = %d\n", v, i, dist[i]);
        }
    }

    return 0;
}
