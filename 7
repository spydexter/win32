#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define INF INT_MAX

void allpaths(int **cost, int **a, int n) {
    int i, j, k;
    
    #pragma omp parallel for collapse(2) num_threads(2)
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            a[i][j] = cost[i][j];
        }
    }
    
    #pragma omp parallel for collapse(2) num_threads(3)
    for (k = 0; k < n; k++) {
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                if (a[i][k] != INF && a[k][j] != INF) {
                    a[i][j] = (a[i][j] < a[i][k] + a[k][j]) ? a[i][j] : a[i][k] + a[k][j];
                }
            }
        }
    }
}

int main() {
    int i, j, n;
    int **cost, **a;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    cost = (int **)malloc(n * sizeof(int *));
    a = (int **)malloc(n * sizeof(int *));
    for (i = 0; i < n; i++) {
        cost[i] = (int *)malloc(n * sizeof(int));
        a[i] = (int *)malloc(n * sizeof(int));
    }

    printf("Enter the cost adjacency matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
            if (cost[i][j] == 0 && i != j) {
                cost[i][j] = INF;
            }
        }
    }

    allpaths(cost, a, n);

    printf("The shortest paths obtained are as follows:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (a[i][j] == INF) {
                printf("INF\t");
            } else {
                printf("%d\t", a[i][j]);
            }
        }
        printf("\n");
    }

    return 0;
}
